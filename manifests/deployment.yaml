# apiVersion: v1
# kind: Namespace
# metadata:
#   name: frico
# ---
# kind: Service
# apiVersion: v1
# metadata:
#   name: frico-webhook
#   namespace: frico
#   labels:
#     app: frico
# spec:
#   selector:
#     app: frico
#   ports:
#     - name: https
#       protocol: TCP
#       port: 443
#       targetPort: 443
---
kind: Service
apiVersion: v1
metadata:
  name: eaoda-controller
  namespace: frico
  labels:
    app: frico
spec:
  selector:
    app: frico
  ports:
    - name: http
      protocol: TCP
      port: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: webhook
  namespace: frico
  name: webhook
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frico
  template:
    metadata:
      labels:
        app: frico
      name: webhook
    spec:
      serviceAccountName: frico
      nodeSelector:
        type: management
      containers:
        - name: logs
          image: cr.fluentbit.io/fluent/fluent-bit:2.1.10
          imagePullPolicy: IfNotPresent
          env:
            - name: PATH_TO_TAIL
              value: /logs/app.log
            - name: LOG_LEVEL
              value: warning
          volumeMounts:
            - name: logs
              mountPath: /logs
            - mountPath: /fluent-bit/etc/fluent-bit.conf
              name: fluentbit-config
              subPath: fluent-bit.conf
              readOnly: true
        - name: eaoda
          env:
            - name: MAX_REALLOC
              value: "4"
            - name: SIMULATION_NAME
              value: Barnim
            - name: LOG_PATH
              value: /logs/app.log
          image: ghcr.io/nemcikjan/dizp-mutating-webhook:v20240202-d18b76d
          imagePullPolicy: IfNotPresent
          args:
            - "--bind=0.0.0.0:8080"
            # - "--certfile=/certs/tls.crt"
            # - "--keyfile=/certs/tls.key"
            - "eaoda_controller:eaoda"
          volumeMounts:
            - name: logs
              mountPath: /logs
          ports:
            - containerPort: 8080
          #   - readOnly: true
          #     mountPath: /certs
          #     name: webhook-certs
          # readinessProbe:
          #   httpGet:
          #     path: /health
          #     scheme: HTTPS
          #     port: 443
          #   initialDelaySeconds: 3
          #   periodSeconds: 5
          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     scheme: HTTPS
          #     port: 443
          #   initialDelaySeconds: 3
          #   periodSeconds: 5
      terminationGracePeriodSeconds: 20
      volumes:
        - name: fluentbit-config
          configMap:
            name: fluentbit-config
        - name: logs
          emptyDir: {}

      # volumes:
      #   - name: webhook-certs
      #     secret:
      #       secretName: frico-webhook-certs
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: frico
  namespace: frico
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentbit-config
  namespace: frico
data:
  fluent-bit.conf: |
    [SERVICE]
      # Flush
      # =====
      # set an interval of seconds before to flush records to a destination
      flush        1

      # Daemon
      # ======
      # instruct Fluent Bit to run in foreground or background mode.
      daemon       Off

      # Log_Level
      # =========
      # Set the verbosity level of the service, values can be:
      #
      # - error
      # - warning
      # - info
      # - debug
      # - trace
      #
      # e.g. when 'info' is set, that means it includes 'error' and 'warning'.
      log_level    ${LOG_LEVEL}

      # Parsers File
      # ============
      # specify an optional 'Parsers' configuration file
      parsers_file parsers.conf

      # Plugins File
      # ============
      # specify an optional 'Plugins' configuration file to load external plugins.
      plugins_file plugins.conf

      # HTTP Server
      # ===========
      # Enable/Disable the built-in HTTP Server for metrics
      http_server  Off
      http_listen  0.0.0.0
      http_port    2020

      # Storage
      # =======
      # Fluent Bit can use memory and filesystem buffering based mechanisms
      #
      # - https://docs.fluentbit.io/manual/administration/buffering-and-storage
      #
      # storage metrics
      # ---------------
      # publish storage pipeline metrics in '/api/v1/storage'. The metrics are
      # exported only if the 'http_server' option is enabled.
      #
      storage.metrics on

      # storage.path
      # ------------
      # absolute file system path to store filesystem data buffers (chunks).
      #
      # storage.path /tmp/storage

      # storage.sync
      # ------------
      # configure the synchronization mode used to store the data into the
      # filesystem. It can take the values normal or full.
      #
      # storage.sync normal

      # storage.checksum
      # ----------------
      # enable the data integrity check when writing and reading data from the
      # filesystem. The storage layer uses the CRC32 algorithm.
      #
      # storage.checksum off

      # storage.backlog.mem_limit
      # -------------------------
      # if storage.path is set, Fluent Bit will look for data chunks that were
      # not delivered and are still in the storage layer, these are called
      # backlog data. This option configure a hint of maximum value of memory
      # to use when processing these records.
      #
      # storage.backlog.mem_limit 5M

    [INPUT]
      Name                tail
      Path                ${PATH_TO_TAIL}
      Read_from_Head      On
      Refresh_Interval    1
      Rotate_Wait         60
      Mem_Buf_Limit       5MB
      Buffer_Max_Size     1MB
      DB                  /tmp/fluent-bit-state.db
      DB.Sync             Normal
      # Parser              docker

    [OUTPUT]
      Name  stdout
      Format json_lines
      Match *
